{"version":3,"sources":["reducers/charasters.reducer.js","reducers/episodes.reducer.js","reducers/characters.info.reducer.js","reducers/episodes.info.reducer.js","reducers/characters.error.reducer.js","reducers/episodes.error.reducer.js","reducers/main.reducer.js","requests/requests.js","actions/actions.js","requests/fetcher.js","helpers/generate.random.id.js","components/filter/Filter.js","components/episodesCard/EpisodesCard.js","components/modal/BasicModal.js","components/charactersCard/CharactersCard.js","components/tabPanel/TabPanel.js","components/tabPanel/PanelMiddleware.js","components/tabs/BasicTabs.js","components/App.js","index.js"],"names":["charactersReducer","state","action","type","characters","episodesReducer","episodes","charactersInfoReducer","charsInfo","episodesInfoReducer","epsInfo","charactersErrorReducer","isErrorOccurred","episodesErrorReducer","combineReducers","episodesAPI","setCharactersError","setEpisodesError","fetchAPI","dispatch","url","fetch","then","res","json","error","results","info","generateRandomID","length","result","chars","i","charAt","Math","floor","random","Filter","filters","setFilterString","handleChangePage","React","useState","values","setValues","filtersHidden","setFiltersHidden","onChange","e","target","name","value","Box","hidden","sx","pt","pl","pr","display","flexFlow","flexDirection","Object","entries","map","key","val","Array","isArray","FormControl","width","m","InputLabel","id","Select","labelId","label","option","MenuItem","TextField","variant","p","Button","onClick","mr","emptyVal","keys","forEach","k","str","EpisodesCard","data","Card","CardContent","Typography","component","mb","color","episode","air_date","style","position","top","left","transform","minWidth","maxWidth","bgcolor","border","boxShadow","style1","maxHeight","overflowY","BasicModal","open","onClose","listOfEpisodes","setList","useEffect","eps","split","join","Modal","gender","mt","species","status","location","origin","Date","created","toLocaleDateString","CharactersCard","setOpen","CardMedia","image","alt","CardActions","size","TabPanel","index","content","contentType","API","page","setPage","filterString","event","newPage","filter","justifyContent","ml","alignItems","count","Pagination","pages","showFirstButton","showLastButton","pb","connect","ownProps","BasicTabs","setValue","borderBottom","borderColor","Tabs","newValue","Tab","PanelMiddleware","App","className","store","createStore","mainReducer","render","document","getElementById"],"mappings":"2KASeA,EATW,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAChD,MACO,wBADCA,EAAOC,KAEJD,EAAOE,WAEPH,GCIEI,EATS,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAIC,EAAW,uCAC9C,MACO,sBADCA,EAAOC,KAEJD,EAAOI,SAEPL,GCIEM,EATe,WAAyB,IAAxBN,EAAuB,uDAAf,GAAIC,EAAW,uCACpD,MACO,wBADCA,EAAOC,KAEJD,EAAOM,UAEPP,GCIEQ,EATa,WAAyB,IAAxBR,EAAuB,uDAAf,GAAIC,EAAW,uCAClD,MACO,sBADCA,EAAOC,KAEJD,EAAOQ,QAEPT,GCIEU,EATgB,WAA4B,IAA3BV,EAA0B,wDAAXC,EAAW,uCACxD,MACO,yBADCA,EAAOC,KAEJD,EAAOU,gBAEPX,GCIEY,EATc,WAA4B,IAA3BZ,EAA0B,wDAAXC,EAAW,uCACtD,MACO,uBADCA,EAAOC,KAEJD,EAAOU,gBAEPX,GCGEa,cAAgB,CAC7Bd,oBACAK,kBACAE,wBACAE,sBACAE,yBACAE,yB,4CCZSE,EAAW,2CCcTC,EAAqB,SAAAJ,GAAe,MAAK,CACpDT,KAAM,uBACNS,oBAEWK,EAAmB,SAAAL,GAAe,MAAK,CAClDT,KAAM,qBACNS,oBCZa,SAASM,EAASf,EAAMgB,EAAUC,GAC/CC,MAAMD,GACDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACS,eAATpB,EACEoB,EAAIE,MACNN,EAASH,GAAmB,KAE5BG,EAASH,GAAmB,IAC5BG,EDnBoC,CAC9ChB,KAAM,sBACNC,WCiBqCmB,EAAIG,UAC/BP,EDZmC,CAC7ChB,KAAM,sBACNK,UCUqCe,EAAII,QAG7BJ,EAAIE,MACNN,EAASF,GAAiB,KAE1BE,EAASF,GAAiB,IAC1BE,EDvBgC,CAC1ChB,KAAM,oBACNG,SCqBmCiB,EAAIG,UAC7BP,EDhB+B,CACzChB,KAAM,oBACNO,QCcmCa,EAAII,W,kFC5BlC,SAASC,EAAiBC,GAI/B,IAHA,IAAIC,EAAS,GACTC,EAAQ,kEAEHC,EAAI,EAAGA,EAAIH,EAAQG,IAC1BF,GAAUC,EAAME,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMF,SAE1D,OAAOC,E,WCAF,SAASO,EAAT,GAA+D,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,iBAChD,EAA4BC,IAAMC,SAAS,IAA3C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0CH,IAAMC,UAAS,GAAzD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,SAASC,EAASC,GAChBJ,EAAU,2BACLD,GADI,kBAENK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,SA0B9B,OACI,eAACC,EAAA,EAAD,WACE,qBAAKC,OAAQR,EAAb,SACE,cAACO,EAAA,EAAD,CACKE,GAAI,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,QAAS,OAAQC,SAAU,OAAQC,cAAe,OADjF,SAGEC,OAAOC,QAAQxB,GAASyB,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YAAgBC,MAAMC,QAAQF,GACtD,eAACG,EAAA,EAAD,CAEId,GAAI,CAACe,MAAO,IAAKC,EAAG,GAFxB,UAGE,cAACC,EAAA,EAAD,CAAYC,GAAG,2BAAf,SAA2CR,IAC3C,cAACS,EAAA,EAAD,CACIC,QAAQ,2BACRF,GAAG,qBACHrB,MAAOR,EAAOqB,IAAM,GACpBW,MAAOX,EACPjB,SAAUA,EACVG,KAAMc,EANV,SASIC,EAAIF,KAAI,SAAAa,GAAM,OAAI,cAACC,EAAA,EAAD,CAAuB1B,MAAOyB,EAA9B,SAAuCA,GAAxBA,UAZ9BhD,EAAiB,KAiB1B,cAACkD,EAAA,EAAD,CAAWN,GAAG,iBACHlB,GAAI,CAACe,MAAO,IAAKC,EAAG,GAEpBK,MAAOX,EACPe,QAAQ,WACR7B,KAAMc,EACNb,MAAOR,EAAOqB,IAAM,GACpBjB,SAAUA,GALLiB,UAWxB,eAACZ,EAAA,EAAD,CAAKE,GAAI,CAAC0B,EAAG,EAAGtB,QAAS,OAAQE,cAAe,OAAhD,UACE,cAACqB,EAAA,EAAD,CAAQC,QA7DhB,WACEpC,GAAkBD,IA4DmBS,GAAI,CAAE6B,GAAI,GAAzC,kBACA,cAACF,EAAA,EAAD,CAAQC,QA1DhB,WACE,IAAIE,EAAWzC,EACfkB,OAAOwB,KAAKD,GAAUE,SAAQ,SAAAC,GAAC,OAAIH,EAASG,GAAK,MACjD3C,EAAU,2BAAID,GAAWyC,IAEzB7C,EAAgB,IAChBC,EAAiB,KAAM,EAAP,KAoDsBc,GAAI,CAAE6B,GAAI,GAA1C,mBACA,cAACF,EAAA,EAAD,CAAQC,QAlDhB,WACE,IAAIM,EAAG,GACP,IAAK,IAAIxB,KAAOrB,EACd6C,GAAG,WAAQxB,EAAR,YAAerB,EAAOqB,IAE3BzB,EAAgBiD,GAChBhD,EAAiB,KAAM,EAAGgD,IA4CYT,QAAQ,WAAxC,gC,+BC1EK,SAASU,EAAT,GAA+B,IAARC,EAAO,EAAPA,KACpC,OACI,cAACC,EAAA,EAAD,CAAMrC,GAAI,CAAEgB,EAAE,IAAKD,MAAO,KAA1B,SACE,eAACuB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYd,QAAQ,KAAKe,UAAU,MAAnC,SACGJ,EAAKxC,OAER,eAAC2C,EAAA,EAAD,CAAYvC,GAAI,CAAEyC,GAAI,KAAOC,MAAM,iBAAnC,UACGN,EAAKO,QACN,uBAFF,aAGaP,EAAKQ,iB,uCCTtBC,EAAQ,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,SAAU,IACVC,SAAU,IACVC,QAAS,mBACTC,OAAQ,iBACRC,UAAW,GACX5B,EAAG,GAGC6B,EAAS,CACbC,UAAW,IACXC,UAAW,QAGE,SAASC,EAAT,GAA4C,IAAvBtB,EAAsB,EAAtBA,KAAMuB,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAC9C,EAAgCxE,mBAAS,IAAzC,mBAAKyE,EAAL,KAAqBC,EAArB,KAcA,OAZAC,qBAAU,WASR,OARAhG,MAAMN,EAAc2E,EAAKO,QAAQlC,KAAI,SAAAuD,GAAG,OAAIA,EAAIC,MAAM,KAAKD,EAAIC,MAAM,KAAK1F,OAAO,MAAI2F,KAAK,MACrFlG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACA2C,MAAMC,QAAQ5C,GAChB6F,EAAQ,YAAI7F,IAEZ6F,EAAQ,CAAC7F,OAEV6F,EAAQ,MACf,CAAC1B,EAAKO,QAASgB,IAGb,8BACE,cAACQ,EAAA,EAAD,CACIR,KAAMA,EACNC,QAASA,EACT,kBAAgB,oBAChB,mBAAiB,0BAJrB,SAME,eAAC9D,EAAA,EAAD,CAAKE,GAAI6C,EAAT,UACE,cAACN,EAAA,EAAD,CAAYrB,GAAG,oBAAoBO,QAAQ,KAAKe,UAAU,KAA1D,SACGJ,EAAKxC,OAER,eAAC2C,EAAA,EAAD,CAAYvC,GAAI,CAACyC,GAAI,KAAMC,MAAM,iBAAjC,qBACWN,EAAKgC,UAEhB,eAAC7B,EAAA,EAAD,CAAYrB,GAAG,0BAA0BlB,GAAI,CAAEqE,GAAI,GAAK5C,QAAQ,QAAhE,sBACYW,EAAKkC,QACf,uBAFF,WAGWlC,EAAKmC,OACd,uBAJF,aAKanC,EAAKoC,SAAS5E,KACzB,uBANF,SAOSwC,EAAKvF,MAAQ,OACpB,uBARF,WASWuF,EAAKqC,OAAO7E,KACrB,uBAVF,YAWa,IAAI8E,KAAKtC,EAAKuC,SAAUC,wBAErC,eAAC9E,EAAA,EAAD,CAAKoB,GAAG,0BAA0BlB,GAAE,aAAIqE,GAAI,GAAMd,GAAS9B,QAAQ,QAAnE,uBACaoC,EAAetF,OAC1B,uBACA,6BAEEsF,EAAepD,KAAI,SAAAuD,GAAG,OAAI,mCAAiCA,EAAIrB,QAArC,KAAgDqB,EAAIpE,OAA3CtB,EAAiB,oBC/DrD,SAASuG,EAAT,GAAiC,IAARzC,EAAO,EAAPA,KACtC,EAAwBhD,oBAAS,GAAjC,mBAAOuE,EAAP,KAAamB,EAAb,KAIA,OACI,eAACzC,EAAA,EAAD,CAAMrC,GAAI,CAACgB,EAAG,IAAKD,MAAO,KAA1B,UACE,eAACuB,EAAA,EAAD,WACE,cAACyC,EAAA,EAAD,CACIvC,UAAU,MAEVwC,MAAO5C,EAAK4C,MACZC,IAAK7C,EAAKxC,KAAO,WAErB,cAAC2C,EAAA,EAAD,CAAYd,QAAQ,KAAKe,UAAU,MAAnC,SACGJ,EAAKxC,OAER,eAAC2C,EAAA,EAAD,CAAYvC,GAAI,CAACyC,GAAI,KAAMC,MAAM,iBAAjC,qBACWN,EAAKgC,UAEhB,eAAC7B,EAAA,EAAD,CAAYd,QAAQ,QAApB,sBACYW,EAAKkC,QACf,uBAFF,WAGWlC,EAAKmC,OACd,uBAJF,aAKanC,EAAKoC,SAAS5E,WAG7B,cAACsF,EAAA,EAAD,UACE,cAACvD,EAAA,EAAD,CAAQwD,KAAK,QAAQvD,QA3BV,kBAAMkD,GAAQ,IA2BzB,uBAEF,cAACpB,EAAD,CAAYtB,KAAMA,EAAMuB,KAAMA,EAAMC,QA5BtB,kBAAMkB,GAAQ,SCuDrBM,MA5Df,YAA8F,IAA3EvF,EAA0E,EAA1EA,MAAOwF,EAAmE,EAAnEA,MAAOxH,EAA4D,EAA5DA,SAAUyH,EAAkD,EAAlDA,QAASjH,EAAyC,EAAzCA,KAAMF,EAAmC,EAAnCA,MAAOoH,EAA4B,EAA5BA,YAAavG,EAAe,EAAfA,QAASwG,EAAM,EAANA,IACrFzB,qBAAU,WACRnG,EAAS2H,EAAa1H,EAAU2H,KAC/B,CAACD,EAAa1H,EAAU2H,IAE3B,MAAwBrG,IAAMC,SAAS,GAAvC,mBAAOqG,EAAP,KAAaC,EAAb,KACA,EAAwCvG,IAAMC,SAAN,IAAxC,mBAAOuG,EAAP,KAAqB1G,EAArB,KAEMC,EAAmB,SAAC0G,GAA+C,IAAxCC,EAAuC,uDAA7B,EAAGC,EAA0B,uDAAjBH,EACrD/H,EACI2H,EACA1H,EACA2H,EAAG,gBAAYK,GAAYC,GAE/BJ,EAAQG,IAGV,OAAKtF,OAAOwB,KAAKuD,GAAS/G,QAAWgC,OAAOwB,KAAK1D,GAAME,OAInD,sBAAKwB,OAAQF,IAAUwF,EAAvB,UACE,cAACvF,EAAA,EAAD,UACE,cAACf,EAAD,CAAQC,QAASA,EAASC,gBAAiBA,EAAiBC,iBAAkBA,MAEhF,eAACY,EAAA,EAAD,CAAKE,GAAI,CAAC0B,EAAG,EAAGvB,GAAI,EAAGC,QAAS,OAAQC,SAAU,OAAQ0F,eAAgB,OAA1E,UAEK1H,EACG,cAACyB,EAAA,EAAD,CAAKE,GAAI,CAAEgG,GAAI,EAAGnE,GAAI,EAAGzB,QAAS,OAAS6F,WAAY,UAAvD,SACK5H,EAAK6H,MAAO,IAAIX,IAErB,KAEN,cAACY,EAAA,EAAD,CAAYV,KAAQtH,EAAe,EAAPsH,EAChBS,MAAS/H,EAAqB,EAAbE,EAAK+H,MACtB3G,SAAUP,EACVmH,iBAAe,EACfC,gBAAc,OAE5B,cAACxG,EAAA,EAAD,CAAKE,GAAI,CAAC0B,EAAG,EAAGtB,QAAS,OAAQC,SAAU,OAAQ0F,eAAgB,gBAAnE,SAEM5H,EAME,cAAC2B,EAAA,EAAD,oCALAwF,EAAQ7E,KAAI,SAAAxC,GAAG,MACM,eAAhBsH,EACG,cAACV,EAAD,CAA6BzC,KAAMnE,GAAdA,EAAIiD,IACzB,cAACiB,EAAD,CAA2BC,KAAMnE,GAAdA,EAAIiD,SAKvC,cAACpB,EAAA,EAAD,CAAKE,GAAI,CAAC0B,EAAG,EAAG6E,GAAI,GAAInG,QAAS,OAAQ2F,eAAgB,OAAzD,SACE,cAACI,EAAA,EAAD,CAAYV,KAAQtH,EAAe,EAAPsH,EAChBS,MAAS/H,EAAqB,EAAbE,EAAK+H,MACtB3G,SAAUP,EACVmH,iBAAe,EACfC,gBAAc,SArCzB,MCQIE,eA/BS,SAAC7J,EAAO8J,GAAR,MACM,eAAzBA,EAASlB,YACN,CACED,QAAS3I,EAAMD,kBACf2B,KAAM1B,EAAMM,sBACZkB,MAAOxB,EAAMU,uBACbmI,ITVc,6CSWdxG,QAAS,CACPY,KAAM,GACN2E,OAAQ,CAAC,QAAS,OAAQ,UAAU,IACpCD,QAAS,GACTzH,KAAM,GACNuH,OAAQ,CAAC,SAAU,OAAQ,aAAc,UAAU,MAGvD,CACEkB,QAAS3I,EAAMI,gBACfsB,KAAM1B,EAAMQ,oBACZgB,MAAOxB,EAAMY,qBACbiI,IAAK/H,EACLuB,QAAS,CACPY,KAAM,GACN+C,QAAS,QAKM,SAAA9E,GAAQ,MAAK,CACtCA,cAGa2I,CAGbpB,GC/Ba,SAASsB,IACtB,MAA0BvH,WAAe,GAAzC,mBAAOU,EAAP,KAAc8G,EAAd,KAMA,OACI,eAAC7G,EAAA,EAAD,CAAKE,GAAI,CAAEe,MAAO,QAAlB,UACE,cAACjB,EAAA,EAAD,CAAKE,GAAI,CAAE4G,aAAc,EAAGC,YAAa,WAAzC,SACE,eAACC,EAAA,EAAD,CAAM9G,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAKN,MAAOA,EAAOJ,SAPpC,SAACmG,EAAOmB,GAC3BJ,EAASI,IAMH,UACE,cAACC,EAAA,EAAD,CAAK3F,MAAM,eACX,cAAC2F,EAAA,EAAD,CAAK3F,MAAM,kBAGf,cAAC4F,EAAD,CAAiBpH,MAAOA,EAAOwF,MAAO,EAAGE,YAAa,eACtD,cAAC0B,EAAD,CAAiBpH,MAAOA,EAAOwF,MAAO,EAAGE,YAAa,gBCX/C2B,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACT,EAAD,OCEAU,EAAQC,YAAYC,GAE1BC,iBACI,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.94304455.chunk.js","sourcesContent":["const charactersReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'SET_CHARACTERS_LIST':\r\n      return action.characters\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default charactersReducer\r\n","const episodesReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'SET_EPISODES_LIST':\r\n      return action.episodes\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default episodesReducer\r\n","const charactersInfoReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'SET_CHARACTERS_INFO':\r\n      return action.charsInfo\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default charactersInfoReducer\r\n","const episodesInfoReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'SET_EPISODES_INFO':\r\n      return action.epsInfo\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default episodesInfoReducer\r\n","const charactersErrorReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case 'SET_CHARACTERS_ERROR':\r\n      return action.isErrorOccurred\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default charactersErrorReducer\r\n","const episodesErrorReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case 'SET_EPISODES_ERROR':\r\n      return action.isErrorOccurred\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default episodesErrorReducer\r\n","import {combineReducers} from 'redux'\r\nimport charactersReducer from \"./charasters.reducer\";\r\nimport episodesReducer from \"./episodes.reducer\";\r\nimport charactersInfoReducer from \"./characters.info.reducer\";\r\nimport episodesInfoReducer from \"./episodes.info.reducer\";\r\nimport charactersErrorReducer from \"./characters.error.reducer\";\r\nimport episodesErrorReducer from \"./episodes.error.reducer\";\r\n\r\nexport default combineReducers({\r\n  charactersReducer,\r\n  episodesReducer,\r\n  charactersInfoReducer,\r\n  episodesInfoReducer,\r\n  charactersErrorReducer,\r\n  episodesErrorReducer\r\n})\r\n","export let charactersAPI = `https://rickandmortyapi.com/api/character/`;\r\n\r\nexport let episodesAPI = `https://rickandmortyapi.com/api/episode/`;\r\n","export const setCharactersList = characters => ({\r\n  type: 'SET_CHARACTERS_LIST',\r\n  characters\r\n})\r\nexport const setEpisodesList = episodes => ({\r\n  type: 'SET_EPISODES_LIST',\r\n  episodes\r\n})\r\nexport const setCharactersInfo = charsInfo => ({\r\n  type: 'SET_CHARACTERS_INFO',\r\n  charsInfo\r\n})\r\nexport const setEpisodesInfo = epsInfo => ({\r\n  type: 'SET_EPISODES_INFO',\r\n  epsInfo\r\n})\r\nexport const setCharactersError = isErrorOccurred => ({\r\n  type: 'SET_CHARACTERS_ERROR',\r\n  isErrorOccurred\r\n})\r\nexport const setEpisodesError = isErrorOccurred => ({\r\n  type: 'SET_EPISODES_ERROR',\r\n  isErrorOccurred\r\n})\r\n","import {\r\n  setCharactersError,\r\n  setCharactersInfo,\r\n  setCharactersList,\r\n  setEpisodesError,\r\n  setEpisodesInfo,\r\n  setEpisodesList\r\n} from \"../actions/actions\";\r\n\r\n\r\nexport default function fetchAPI(type, dispatch, url){\r\n  fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (type === 'characters'){\r\n          if (res.error)\r\n            dispatch(setCharactersError(true))\r\n          else {\r\n            dispatch(setCharactersError(false))\r\n            dispatch(setCharactersList(res.results))\r\n            dispatch(setCharactersInfo(res.info))\r\n          }\r\n        } else {\r\n          if (res.error)\r\n            dispatch(setEpisodesError(true))\r\n          else {\r\n            dispatch(setEpisodesError(false))\r\n            dispatch(setEpisodesList(res.results))\r\n            dispatch(setEpisodesInfo(res.info))\r\n          }\r\n        }\r\n      });\r\n}\r\n","export function generateRandomID(length) {\r\n  let result = '',\r\n      chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_';\r\n\r\n  for (let i = 0; i < length; i++)\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n\r\n  return result;\r\n}\r\n","import React from \"react\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {FormControl, InputLabel, MenuItem, Select} from \"@mui/material\";\r\nimport {generateRandomID} from \"../../helpers/generate.random.id\";\r\n\r\nexport function Filter({filters, setFilterString, handleChangePage}) {\r\n  const [values, setValues] = React.useState({})\r\n  const [filtersHidden, setFiltersHidden] = React.useState(false)\r\n\r\n  function onChange(e){\r\n    setValues({\r\n      ...values,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  function handleOnHide(){\r\n    setFiltersHidden(!filtersHidden)\r\n  }\r\n\r\n  function handleOnClear(){\r\n    let emptyVal = values;\r\n    Object.keys(emptyVal).forEach(k => emptyVal[k] = '')\r\n    setValues({...values, ...emptyVal})\r\n\r\n    setFilterString(``)\r\n    handleChangePage(null, 1, ``)\r\n  }\r\n\r\n  function handleOnApply(){\r\n    let str = ``\r\n    for (let key in values)\r\n      str += `&${key}=${values[key]}`\r\n\r\n    setFilterString(str)\r\n    handleChangePage(null, 1, str)\r\n  }\r\n\r\n  return (\r\n      <Box>\r\n        <div hidden={filtersHidden}>\r\n          <Box\r\n               sx={{pt: 3, pl: 3, pr: 3, display: \"flex\", flexFlow: 'wrap', flexDirection: 'row'}}>\r\n          {\r\n            Object.entries(filters).map(([key, val]) => Array.isArray(val) ?\r\n                <FormControl\r\n                    key={generateRandomID(10)}\r\n                    sx={{width: 200, m: 1}}>\r\n                  <InputLabel id=\"demo-simple-select-label\">{key}</InputLabel>\r\n                  <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      value={values[key]||''}\r\n                      label={key}\r\n                      onChange={onChange}\r\n                      name={key}\r\n                  >\r\n                    {\r\n                      val.map(option => <MenuItem key={option} value={option}>{option}</MenuItem>)\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n                :\r\n                <TextField id=\"outlined-basic\"\r\n                           sx={{width: 200, m: 1}}\r\n                           key={key}\r\n                           label={key}\r\n                           variant=\"outlined\"\r\n                           name={key}\r\n                           value={values[key]||''}\r\n                           onChange={onChange}\r\n                />\r\n            )\r\n          }\r\n          </Box>\r\n        </div>\r\n        <Box sx={{p: 3, display: \"flex\", flexDirection: 'row'}}>\r\n          <Button onClick={handleOnHide} sx={{ mr: 3 }}>Hide</Button>\r\n          <Button onClick={handleOnClear} sx={{ mr: 3 }}>Clear</Button>\r\n          <Button onClick={handleOnApply} variant=\"outlined\">Apply filter</Button>\r\n        </Box>\r\n      </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\n\r\n\r\nexport default function EpisodesCard({data}) {\r\n  return (\r\n      <Card sx={{ m:1.5, width: 300 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h5\" component=\"div\">\r\n            {data.name}\r\n          </Typography>\r\n          <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n            {data.episode}\r\n            <br/>\r\n            Air date: {data.air_date}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport {useEffect, useState} from \"react\";\r\nimport {generateRandomID} from \"../../helpers/generate.random.id\";\r\nimport {episodesAPI} from \"../../requests/requests\";\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  minWidth: 300,\r\n  maxWidth: 500,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst style1 = {\r\n  maxHeight: 300,\r\n  overflowY: 'auto'\r\n}\r\n\r\nexport default function BasicModal({data, open, onClose}) {\r\n  let [listOfEpisodes, setList] = useState([])\r\n\r\n  useEffect(()=>{\r\n    fetch(episodesAPI + data.episode.map(eps => eps.split('/')[eps.split('/').length-1]).join(','))\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          if (Array.isArray(res))\r\n            setList([...res])\r\n          else\r\n            setList([res])\r\n        })\r\n    return setList([])\r\n  },[data.episode, open])\r\n\r\n  return (\r\n      <div>\r\n        <Modal\r\n            open={open}\r\n            onClose={onClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-title\" variant=\"h3\" component=\"h2\">\r\n              {data.name}\r\n            </Typography>\r\n            <Typography sx={{mb: 1.5}} color=\"text.secondary\">\r\n              Gender: {data.gender}\r\n            </Typography>\r\n            <Typography id=\"modal-modal-description\" sx={{ mt: 2 }} variant=\"body2\">\r\n              Species: {data.species}\r\n              <br/>\r\n              Status: {data.status}\r\n              <br/>\r\n              Location: {data.location.name}\r\n              <br/>\r\n              Type: {data.type || 'None'}\r\n              <br/>\r\n              Origin: {data.origin.name}\r\n              <br/>\r\n              Created: {(new Date(data.created)).toLocaleDateString()}\r\n            </Typography>\r\n            <Box id=\"modal-modal-description\" sx={{ mt: 2, ...style1}} variant=\"body2\">\r\n              Episodes: {listOfEpisodes.length}\r\n              <br/>\r\n              <ul>\r\n              {\r\n                listOfEpisodes.map(eps => <li key={generateRandomID(10)}>[{eps.episode}] {eps.name}</li>)\r\n              }\r\n              </ul>\r\n            </Box>\r\n          </Box>\r\n        </Modal>\r\n      </div>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport {CardMedia} from \"@mui/material\";\r\nimport BasicModal from \"../modal/BasicModal\";\r\n\r\n\r\nexport default function CharactersCard({data}) {\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return (\r\n      <Card sx={{m: 1.5, width: 300}}>\r\n        <CardContent>\r\n          <CardMedia\r\n              component=\"img\"\r\n              // height=\"194\"\r\n              image={data.image}\r\n              alt={data.name + ' image'}\r\n          />\r\n          <Typography variant=\"h5\" component=\"div\">\r\n            {data.name}\r\n          </Typography>\r\n          <Typography sx={{mb: 1.5}} color=\"text.secondary\">\r\n            Gender: {data.gender}\r\n          </Typography>\r\n          <Typography variant=\"body2\">\r\n            Species: {data.species}\r\n            <br/>\r\n            Status: {data.status}\r\n            <br/>\r\n            Location: {data.location.name}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button size=\"small\" onClick={handleOpen}>Details</Button>\r\n        </CardActions>\r\n        <BasicModal data={data} open={open} onClose={handleClose}/>\r\n      </Card>\r\n  )\r\n\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport fetchAPI from \"../../requests/fetcher\";\r\n\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Box from \"@mui/material/Box\";\r\nimport {Filter} from \"../filter/Filter\";\r\nimport EpisodesCard from \"../episodesCard/EpisodesCard\";\r\nimport CharactersCard from \"../charactersCard/CharactersCard\";\r\n\r\nfunction TabPanel({value, index, dispatch, content, info, error, contentType, filters, API}) {\r\n  useEffect(() => {\r\n    fetchAPI(contentType, dispatch, API)\r\n  }, [contentType, dispatch, API])\r\n\r\n  const [page, setPage] = React.useState(1);\r\n  const [filterString, setFilterString] = React.useState(``);\r\n\r\n  const handleChangePage = (event, newPage = 1, filter = filterString) => {\r\n    fetchAPI(\r\n        contentType,\r\n        dispatch,\r\n        API + `?page=${newPage}` + filter\r\n    )\r\n    setPage(newPage);\r\n  };\r\n\r\n  if (!Object.keys(content).length || !Object.keys(info).length)\r\n    return null;\r\n\r\n  return (\r\n      <div hidden={value !== index}>\r\n        <Box>\r\n          <Filter filters={filters} setFilterString={setFilterString} handleChangePage={handleChangePage}/>\r\n        </Box>\r\n        <Box sx={{p: 1, pr: 5, display: 'flex', flexFlow: 'wrap', justifyContent: 'end'}}>\r\n          {\r\n            (info)?\r\n                <Box sx={{ ml: 3, mr: 3, display: 'flex',  alignItems: 'center' }}>\r\n                    {info.count +' '+contentType}\r\n                </Box>:\r\n                null\r\n          }\r\n          <Pagination page={(!error)? page : 1}\r\n                      count={(!error)? info.pages : 1}\r\n                      onChange={handleChangePage}\r\n                      showFirstButton\r\n                      showLastButton/>\r\n        </Box>\r\n        <Box sx={{p: 3, display: \"flex\", flexFlow: 'wrap', justifyContent: 'space-around'}}>\r\n          {\r\n            (!error) ?\r\n                content.map(res =>\r\n                    (contentType === 'characters')?\r\n                        <CharactersCard key={res.id} data={res} /> :\r\n                        <EpisodesCard key={res.id} data={res} />\r\n                ) :\r\n                <Box>There is nothing here</Box>\r\n          }\r\n        </Box>\r\n        <Box sx={{p: 5, pb: 10, display: 'flex', justifyContent: 'end'}}>\r\n          <Pagination page={(!error)? page : 1}\r\n                      count={(!error)? info.pages : 1}\r\n                      onChange={handleChangePage}\r\n                      showFirstButton\r\n                      showLastButton/>\r\n        </Box>\r\n      </div>\r\n  );\r\n}\r\nexport default TabPanel\r\n","import {charactersAPI, episodesAPI} from \"../../requests/requests\";\r\nimport {connect} from \"react-redux\";\r\nimport TabPanel from \"./TabPanel\";\r\n\r\nconst mapStateToProps = (state, ownProps) => (\r\n    (ownProps.contentType === 'characters') ?\r\n        {\r\n          content: state.charactersReducer,\r\n          info: state.charactersInfoReducer,\r\n          error: state.charactersErrorReducer,\r\n          API: charactersAPI,\r\n          filters: {\r\n            name: '',\r\n            status: ['alive', 'dead', 'unknown',''],\r\n            species: '',\r\n            type: '',\r\n            gender: ['female', 'male', 'genderless', 'unknown','']\r\n          }\r\n        } :\r\n        {\r\n          content: state.episodesReducer,\r\n          info: state.episodesInfoReducer,\r\n          error: state.episodesErrorReducer,\r\n          API: episodesAPI,\r\n          filters: {\r\n            name: '',\r\n            episode: ''\r\n          }\r\n        }\r\n)\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatch\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TabPanel)\r\n","import * as React from 'react';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Box from '@mui/material/Box';\r\nimport PanelMiddleware from \"../tabPanel/PanelMiddleware\";\r\n\r\n\r\nexport default function BasicTabs() {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n      <Box sx={{ width: '100%' }}>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs sx={{ pt: 3, pl: 3, pr: 3 }} value={value} onChange={handleChange}>\r\n            <Tab label=\"Characters\" />\r\n            <Tab label=\"Episodes\" />\r\n          </Tabs>\r\n        </Box>\r\n        <PanelMiddleware value={value} index={0} contentType={'characters'}/>\r\n        <PanelMiddleware value={value} index={1} contentType={'episodes'}/>\r\n      </Box>\r\n  );\r\n}\r\n","import React from \"react\"\r\n\r\nimport BasicTabs from \"./tabs/BasicTabs\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BasicTabs />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport {render} from 'react-dom'\r\nimport {createStore} from 'redux'\r\nimport {Provider} from 'react-redux'\r\nimport mainReducer from './reducers/main.reducer'\r\nimport './index.css'\r\nimport App from './components/App'\r\n\r\n\r\nconst store = createStore(mainReducer)\r\n\r\nrender(\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}
